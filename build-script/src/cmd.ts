
import * as buildTools from "frontend-build-tools";
import * as path from "path";
import * as fs from "fs";
import * as repl from "repl";
import * as scriptTools from "scripting-tools";

if (require.main === module) {

    process.once("unhandledRejection", error => { throw error; });

    process.setMaxListeners(70)

    import("commander").then(async program => {

        program
            .command("build_page")
            .description("Build a specific page, to be called from the page root dir")
            .option("-w, --watch", "Watch input files")
            .action(options => program_action_build_page(options))
            ;

        program
            .command("build_pages")
            .description("Build all pages")
            .option("-w, --watch", "Watch input files")
            .action(options => program_action_build_pages(options))
            ;

        program
            .command("install_pages")
            .description("npm install everywhere")
            .action(() => program_action_install_pages())
            ;

        program.parse(process.argv);

    });

}

const startExitRepl = () => {

    console.log("enter exit for graceful termination");

    const replInstance = repl.start({
        "terminal": true,
        "prompt": "> "
    });

    const { context } = replInstance;

    Object.defineProperty(context, "exit", {
        "get": () => process.exit(0)
    });
};

const build_page = (
    target_module_dir_path: string,
    watch?: undefined | "WATCH"
) => {

    const page_version: string = require(
        path.join(target_module_dir_path, "package.json")
    )["version"];

    {

        const page_file_path = path.join(target_module_dir_path, "page.ejs");

        fs.writeFileSync(
            page_file_path,
            Buffer.from([
                `<%`,
                `//Automatically generated by build-script`,
                `const version= "${page_version}";`,
                `%>`,
                ``,
                (() => {

                    const page = fs.readFileSync(page_file_path)
                        .toString("utf8");

                    return page.substring(
                        page.match(/<\!DOCTYPE\ html>/i)!.index!
                    );

                })()
            ].join("\n"), "utf8")
        );

    }

    (async () => {

        await buildTools.tsc(
            path.join(target_module_dir_path, "tsconfig.json"),
            watch
        );

        const bundle_file_path = path.join(
            __dirname, "..", "..", "static.semasim.com",
            `${path.basename(target_module_dir_path)}-${page_version}.js`
        );

        await buildTools.browserify(
            [ "--entry", path.join(target_module_dir_path, "dist", "main.js") ],
            [ "--outfile", bundle_file_path ],
            undefined,
            watch
        );

        await buildTools.minify(
            bundle_file_path,
            watch
        );


    })();

}

async function program_action_build_page(options) {

    const watch = !!options["watch"] ? "WATCH" : undefined;

    if (!!watch) {

        startExitRepl();

    }

    const target_module_dir_path = process.cwd();

    build_page(target_module_dir_path, watch);


}

const frontend_root_dir_path = path.join(__dirname, "..", "..");
const pages_dir_path = path.join(frontend_root_dir_path, "pages");

async function program_action_build_pages(options) {

    const watch = !!options["watch"] ? "WATCH" : undefined;

    if (!!watch) {

        startExitRepl();

    }


    console.log(path.join(frontend_root_dir_path, "shared", "tsconfig.json"));


    await buildTools.tsc(
        path.join(frontend_root_dir_path, "shared", "tsconfig.json"),
        watch
    );


    for (const page_name of fs.readdirSync(pages_dir_path)
        .filter(entry => fs.statSync(path.join(pages_dir_path, entry))
            .isDirectory())
    ) {

        build_page(
            path.join(pages_dir_path, page_name),
            watch
        );

    }

}

async function program_action_install_pages() {

    await Promise.all(
        [
            "shared",
            ...fs.readdirSync(pages_dir_path)
                .map(page_name => path.join("pages", page_name))
        ]
            .map(relative_path => path.join(frontend_root_dir_path, relative_path))
            .map(async target_module_dir_path => {

                const module_name = path.basename(target_module_dir_path);

                console.log(`START ${module_name}`);

                await scriptTools.exec(`rm -f ${path.join(target_module_dir_path, "package-lock.json")}`);

                await scriptTools.exec(
                    `npm install`,
                    { "cwd": target_module_dir_path }
                );

                console.log(`${module_name} DONE`);


            })
    );

}

